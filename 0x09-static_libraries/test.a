!<arch>
0-isupper.c/    0           0     0     644     346       `
#include "main.h"

/**
 * _isupper - function that checks for uppercase character
 * @c: input char
 * Return: 1 if c is uppercase or 0 otherwise
 */
int _isupper(int c)
{
	char uppercase;
	int isupper = 0;

	for (uppercase = 'A'; uppercase <= 'Z'; uppercase++)
	{
		if (c == uppercase)
		{
			isupper = 1;
			break;
		}
	}

	return (isupper);
}
0-memset.c/     0           0     0     644     330       `
#include "main.h"

/**
 * _memset - function that fills first n bytes of memory pointed by s
 * with b
 * @s: input memory area
 * @b: value added in memory
 * @n: num of bytes
 * Return: pointer to s
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	while (n > 0)
	{
		*s = b;
		s++;
		n--;
	}

	return (p);
}
0-strcat.c/     0           0     0     644     372       `
#include "main.h"

/**
 * _strcat - a function that concatenates two strings.
 * @dest: an input string
 * @src: an input string
 * Return: A pointer to the resulting string
 */
char *_strcat(char *dest, char *src)
{
	char *str = dest;

	while (*dest != '\0')
	{
		dest++;
	}

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (str);
}
1-atoi.c/       0           0     0     644     170       `
#include "main.h"
#include <stdio.h>

/**
 *_atoi - function that convert string to integer
 *@s: input string
 *Return: integer
 */

int _atoi(char *s)
{
	return (0);
}
1-isdigit.c/    0           0     0     644     324       `
#include "main.h"

/**
 * _isdigit - function that checksif input char is a digit
 * @c: input char
 * Return: 1 if c is a digit or 0 otherwise
 */
int _isdigit(int c)
{
	char digit;
	int isdigit = 0;

	for (digit = '0'; digit <= '9'; digit++)
	{
		if (c == digit)
		{
			isdigit = 1;
			break;
		}
	}

	return (isdigit);
}
1-memcpy.c/     0           0     0     644     355       `
#include "main.h"

/**
 * _memcpy - function that copies n bytes from src to dest
 * @dest: input destination address
 * @src: input source address
 * @n: number of bytes
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *p = dest;

	while (n > 0)
	{
		*dest = *src;
		dest++;
		src++;
		n--;
	}

	return (p);
}

1-strncat.c/    0           0     0     644     435       `
#include "main.h"

/**
 * _strncat - a function that concatenates two strings n bytes only from src.
 * @dest: an input string
 * @src: an input string
 * @n: num of characters
 * Return: A pointer to the resulting string
 */
char *_strncat(char *dest, char *src, int n)
{
	char *str = dest;

	while (*dest != '\0')
	{
		dest++;
	}

	while (*src != '\0' && n--)
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (str);
}

2-islower.c/    0           0     0     644     346       `
#include "main.h"

/**
 * _islower - function that checks for lowercase character
 * @c: input char
 * Return: 1 if c is lowercase or 0 otherwise
 */
int _islower(int c)
{
	char lowercase;
	int islower = 0;

	for (lowercase = 'a'; lowercase <= 'z'; lowercase++)
	{
		if (c == lowercase)
		{
			islower = 1;
			break;
		}
	}

	return (islower);
}
2-strchr.c/     0           0     0     644     317       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - function that returns pointer to first occurence of a char
 * @s: string s
 * @c: char to find
 * Return: pointer to char
 */

char *_strchr(char *s, char c)
{
	char *p = NULL;

	while (*s)
	{
		if (*s == c)
		{
			p = s;
			break;
		}
		s++;
	}

	return (p);
}

2-strlen.c/     0           0     0     644     243       `
#include "main.h"

/**
 * _strlen - function that gets the length of a string
 * @s: input char array
 * Return: length of string
 */

int _strlen(char *s)
{
	int length  = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}

	return (length);
}

2-strncpy.c/    0           0     0     644     462       `
#include "main.h"

/**
 * _strncpy - a function that copys the strings.
 * @dest: an input string
 * @src: an input string
 * @n: an input integer
 * Return: A pointer to the resulting string
 */
char *_strncpy(char *dest, char *src, int n)
{
	char *str = dest;
	int len = 0, i = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < n; i++)
	{
		if (i < len)
		{
			*dest = *src;
			dest++;
			src++;
		}
		else
			*dest++ = '\0';
	}

	return (str);
}
3-isalpha.c/    0           0     0     644     211       `
#include "main.h"

/**
* _isalpha - function that checks if the character is a letter
* , lowercase or uppercase.
* @c: An input character
* Return: 1 or 0 in otherwise.
*/

int _isalpha(int c)
{
	return (0);
}

3-puts.c/       0           0     0     644     238       `
#include "main.h"

/**
 * _puts - function that prints a string followed by new line
 * @str: input string
 * Return: 0
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     310       `
#include "main.h"

/**
 * _strcmp - a function that compares two strings.
 * @s1: an input string
 * @s2: an input string
 * Return: The difference s1 - s2
 */

int _strcmp(char *s1, char *s2)
{
	int ret = 0;

	while (*s1)
	{
		if (*s1 != *s2)
			break;
		s1++;
		s2++;
	}

	ret = *s1 - *s2;

	return (ret);
}
3-strspn.c/     0           0     0     644     471       `
#include "main.h"

/**
 * _strspn - function that returns num of bytes that consist
 * of bytes from accept
 * @s: input string
 * @accept: inout bytes
 * Return: num og bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	int c = 0;
	int nomatch = 2;
	char *l = accept;

	while (*s && nomatch != 0)
	{
		nomatch = 0;
		while (*accept)
		{
			if (*accept == *s)
			{
				c++;
				nomatch = 1;
				break;
			}
			accept++;
		}
		accept = l;
		s++;
	}

	return (c);
}

4-strpbrk.c/    0           0     0     644     491       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk -  function locates the first occurrence in the string s
 * of any of the bytes in the string accept
 * @s: input string
 * @accept: searched for string
 * Return: pointer
 */

char *_strpbrk(char *s, char *accept)
{
	char *l = accept;
	char *ret = NULL;

	while (*s)
	{
		while (*accept)
		{
			if (*accept == *s)
			{
				ret = s;
				break;
			}
			accept++;
		}
		s++;
		accept = l;

		if (ret != NULL)
			break;
	}
	return (ret);
}

5-strstr.c/     0           0     0     644     548       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - function finds the first occurrence of the substring needle in
 * the string haystack. The terminating null bytes (\0) are not compared
 * @haystack: input str
 * @needle: substring
 * Return: pointer
 */

char *_strstr(char *haystack, char *needle)
{
	char *str = haystack;
	char *ret = NULL;

	while (*haystack)
	{
		while (*haystack == *needle)
		{
			haystack++;
			needle++;
		}

		if (*needle == '\0')
		{
			ret = haystack;
			break;
		}
		str++;
		haystack = str;
	}

	return (ret);
}
6-abs.c/        0           0     0     644     171       `
#include "main.h"

/**
 * _abs - gets abs of number
 * @r: input number
 * Return: pos number
 */

int _abs(int r)
{
	if (r >= 0)
		return (r);
	else
		return (r * -1);
}

9-strcpy.c/     0           0     0     644     459       `
#include "main.h"

/**
 * _strcpy - a function that copies the string pointed to by src,
 * including the terminating null byte (\0),
 * to the buffer pointed to by dest.
 *
 * @dest: A pointer to destination of string
 * @src: A pointer to source string to copy from
 *
 * Return: pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	char *temp = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';

	return (temp);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

